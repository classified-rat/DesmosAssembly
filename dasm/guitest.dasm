#define BAR_X .1
#define BAR_Y .2

push rx
jl 1, $start

:box_offset
db 0,0,0,1,1,1,1,0
:box_offset_end

:pos
resb 2

:get_pos
; index = rx
; address = ry
push ry       ; save ry

call $swap    ; swap rx and ry ; may be removable
pop
add           ; address += index
mov rx acc
call $swap    ; swap rx and ry back
pop

mov rx ^ry    ; get value at address
pop ry        ; restore ry
ret

:set_pos
; index = rx
; address = ry
; value = [2]
push ry       ; save rx and ry
push rx

add           ; add offset to pointer
mov rx acc
call $swap    ; swap rx and ry
pop

mov rx [5]    ; rx = value
mov ^ry rx

pop rx        ; restore rx and ry
pop ry
ret

:draw_box
ld ry $box_offset

:_draw_box_loop
mov rx ^ry     ; x_offset = box_offset[i]
push ry       ; save ry
push rx       ; save offset for later

ld rx 0       ; get pos.x
ld ry $pos

call $get_pos
pop

pop ry        ; get x_offset

add           ; rx = pos.x + x_offset
mov rx acc

ppush rx
pop ry        ; restore ry

ld rx 1       ; i += 1
add
mov rx acc

call $swap    ; mov rx to ry
pop

mov rx ^ry     ; x_offset = box_offset[i]
push ry       ; save ry
push rx       ; save offset for later

ld rx 1       ; get pos.x
ld ry $pos

call $get_pos
pop

pop ry        ; get x_offset

add           ; rx = pos.x + x_offset
mov rx acc

ppush rx
pop ry        ; restore ry

ld rx 1       ; i += 1
add
mov rx acc

call $swap    ; mov rx to ry
pop

push ry
jl $box_offset_end], $_draw_box_loop

poly
ret

:start
call $draw_box
pop