;#define CIRCLE 1,0,0.991,0.131,0.966,0.259,0.924,0.383,0.866,0.5,0.793,0.609,0.707,0.707,0.609,0.793,0.5,0.866,0.383,0.924,0.259,0.966,0.131,0.991,0,1,-0.131,0.991,-0.259,0.966,-0.383,0.924,-0.5,0.866,-0.609,0.793,-0.707,0.707,-0.793,0.609,-0.866,0.5,-0.924,0.383,-0.966,0.259,-0.991,0.131,-1,0,-0.991,-0.131,-0.966,-0.259,-0.924,-0.383,-0.866,-0.5,-0.793,-0.609,-0.707,-0.707,-0.609,-0.793,-0.5,-0.866,-0.383,-0.924,-0.259,-0.966,-0.131,-0.991,0,-1,0.131,-0.991,0.259,-0.966,0.383,-0.924,0.5,-0.866,0.609,-0.793,0.707,-0.707,0.793,-0.609,0.866,-0.5,0.924,-0.383,0.966,-0.259,0.991,-0.131

; jump to end of standard library
push rx
jl 1, $_std_end

:swap       ; swap rx and ry
push rx
push ry
pop rx
pop ry
ret

:incrx
push ry     ; save ry
ld ry 1     ; ry = 1
add         ; rx += ry
mov rx acc
pop ry      ; restore ry
ret

:incry
push rx     ; save rx

ld rx 1     ; add 1 to ry
add
mov rx acc
push rx
pop ry

pop rx      ; restore rx
ret

:sub        ; rx -= ry
push ry     ; save ry

call $swap   ; swap ry and rx
pop
neg         ; negate rx
call $swap   ; swap rx and ry back
pop

add         ; subtraction
pop ry      ; restore previous ry
ret

:div        ; rx /= ry
push ry     ; save ry

call $swap   ; swap rx and ry
pop
inv         ; get inverse of y
call $swap
pop

mult        ; division
pop ry      ; restore ry
ret

:sign ; (float x)
push rx             ; check if x is negative
jl 0, $_sign_neg
jnz $_sign_pos

; if 0 return 0
ld rx 0
ret

:_sign_neg          ; return -1
ld rx -1
ret

:_sign_pos
ld rx 1            ; return 1
ret

:frac ; (float x)
push ry             ; save ry
push rx             ; check if x is negative
jl 0, $_frac_neg
jnz $_frac_pos

:_frac_neg          ; doesnt keep track of the sign of x
ld ry -1
mult
mov rx acc

push ry             ; jump over positive case
jnz $_frac_loop

:_frac_pos
ld ry -1            ; set ry to -1 for next step

:_frac_loop
dec rx              ; subtract 1 until x 0 1
push rx
jl 0, $_frac_loop_exit
jnz $_frac_loop

:_frac_loop_exit
call $incrx
pop

pop ry              ; restore ry
ret

:floor ; (float x)
push ry
push rx             ; save rx
call $sign          ; get sign of x
pop

push rx             ; put sign on the stack
push rx             ; move sign to ry
pop ry

mov rx [2]          ; restore rx

call $frac          ; get fractional part
pop

neg                 ; get negatve of frac part

push rx             ; store frac part on stack
mov rx [3]          ; get original value
mult                ; x = abs(x)

pop ry              ; get fractional part
add                 ; subtract frac part from abs(x)
mov rx acc

pop ry              ; pop sign into ry
mult                ; multiply by sign

pop
pop ry              ; restore ry

ret

:mod ; (float x, float y)
push ry             ; save y

push rx             ; put sign of rx on stack
call $sign
pop
push rx

mov rx [2]

call $swap
pop

inv                 ; y = 1/2

call $swap
pop

mult
mov rx acc
call $frac         ; frac(x/y)
pop
:_debug_frac_call

mov ry [3]
mult                ; frac(x/y) * y
mov rx acc

pop ry

mult              ; multiply rx by sign
mov rx acc

pop
pop

ret

:lookup ; (float index, int table_pointer)
call $incrx
pop

push ry

push ry
push rx
mov rx ^ry

push rx
pop ry
pop rx
call $mod
pop

:_d_floor
call $floor
pop

pop ry
add
mov rx acc

call $incrx
pop

push rx
pop ry
mov rx ^ry

pop ry
ret

; ###########################################################
; Trig functions

#define PI 3.14159
; half pi
#define hPI 1.570796

:_std_sin_lookup
db 25
db 0,0.06540312923014306,0.13052619222005157,0.19509032201612825,0.25881904510252074,0.32143946530316153,0.3826834323650898,0.44228869021900125,0.49999999999999994,0.5555702330196022,0.6087614290087205,0.6593458151000688,0.7071067811865475,0.7518398074789773,0.7933533402912352,0.8314696123025451,0.8660254037844386,0.8968727415326883,0.9238795325112867,0.9469301294951056,0.9659258262890682,0.9807852804032304,0.9914448613738104,0.9978589232386035,1

:sin
push ry


db -1000
:_std_end